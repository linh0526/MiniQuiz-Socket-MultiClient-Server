import React from 'react';
import { useGame } from '../../contexts/GameContext';
import { socket } from '../../socket';

const GameResults = () => {
  const { leaderboard, gameStats, isHost, roomId } = useGame();

  const handlePlayAgain = () => {
    socket.emit('reset_game', { roomId });
  };

  const handleLeaveRoom = () => {
    socket.emit('leave_room', { roomId });
    window.location.reload();
  };

  const getRankEmoji = (rank) => {
    switch (rank) {
      case 1: return 'ü•á';
      case 2: return 'ü•à';
      case 3: return 'ü•â';
      default: return 'üèÖ';
    }
  };

  const getRankClass = (rank) => {
    if (rank <= 3) return 'top-three';
    return '';
  };

  return (
    <div className="results-container">
      <div className="results-header">
        <h1>üéâ K·∫øt qu·∫£ game</h1>
        <p>Ch√∫c m·ª´ng t·∫•t c·∫£ ng∆∞·ªùi ch∆°i!</p>
      </div>

      <div className="final-leaderboard">
        <h2>B·∫£ng x·∫øp h·∫°ng cu·ªëi c√πng</h2>
        <div className="leaderboard-final">
          {leaderboard.map((player, index) => (
            <div 
              key={player.id} 
              className={`leaderboard-final-item ${getRankClass(player.rank)}`}
            >
              <div className="rank-info">
                <span className="rank-emoji">{getRankEmoji(player.rank)}</span>
                <span className="rank-number">#{player.rank}</span>
              </div>
              
              <div className="player-info">
                <div className="player-name">{player.username}</div>
                <div className="player-stats">
                  <span className="score">ƒêi·ªÉm: {player.score}</span>
                  <span className="answers">
                    ƒê√∫ng: {player.answers.filter(a => a.isCorrect).length}/
                    {player.answers.length}
                  </span>
                </div>
              </div>
              
              <div className="player-score">
                {player.score}
              </div>
            </div>
          ))}
        </div>
      </div>

      {gameStats && (
        <div className="game-stats">
          <h3>Th·ªëng k√™ game</h3>
          <div className="stats-grid">
            <div className="stat-item">
              <span className="stat-label">T·ªïng ng∆∞·ªùi ch∆°i</span>
              <span className="stat-value">{gameStats.playerCount}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">T·ªïng c√¢u h·ªèi</span>
              <span className="stat-value">{gameStats.totalQuestions}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">Th·ªùi gian ch∆°i</span>
              <span className="stat-value">
                {Math.floor((Date.now() - new Date(gameStats.createdAt)) / 60000)} ph√∫t
              </span>
            </div>
          </div>
        </div>
      )}

      <div className="results-actions">
        {isHost && (
          <button 
            className="btn-primary btn-large"
            onClick={handlePlayAgain}
          >
            Ch∆°i l·∫°i
          </button>
        )}
        
        <button 
          className="btn-secondary btn-large"
          onClick={handleLeaveRoom}
        >
          R·ªùi ph√≤ng
        </button>
      </div>

      <div className="share-section">
        <h3>Chia s·∫ª k·∫øt qu·∫£</h3>
        <div className="share-buttons">
          <button 
            className="btn-share"
            onClick={() => {
              const text = `T√¥i v·ª´a ch∆°i Quiz Game v√† ƒë·∫°t ${leaderboard.find(p => p.id === socket.id)?.score || 0} ƒëi·ªÉm! üéÆ`;
              navigator.clipboard.writeText(text);
              alert('ƒê√£ copy link chia s·∫ª!');
            }}
          >
            üìã Copy k·∫øt qu·∫£
          </button>
        </div>
      </div>
    </div>
  );
};

export default GameResults;
